{"version":3,"file":"shuffle.min.js","sources":["../node_modules/tiny-emitter/index.js","../node_modules/matches-selector/index.js","../node_modules/throttleit/index.js","../node_modules/array-parallel/index.js","../src/get-number.js","../src/point.js","../src/rect.js","../src/classes.js","../src/shuffle-item.js","../src/computed-size.js","../src/get-number-style.js","../src/sorter.js","../src/on-transition-end.js","../src/array-max.js","../src/layout.js","../src/array-min.js","../src/shuffle.js","../src/hyphenate.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","'use strict';\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nexport default function getNumber(value) {\n  return parseFloat(value) || 0;\n}\n","import getNumber from './get-number';\n\nclass Point {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  constructor(x, y) {\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n  static equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n}\n\nexport default Point;\n","export default class Rect {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  constructor(x, y, w, h, id) {\n    this.id = id;\n\n    /** @type {number} */\n    this.left = x;\n\n    /** @type {number} */\n    this.top = y;\n\n    /** @type {number} */\n    this.width = w;\n\n    /** @type {number} */\n    this.height = h;\n  }\n\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n  static intersects(a, b) {\n    return (\n      a.left < b.left + b.width && b.left < a.left + a.width\n      && a.top < b.top + b.height && b.top < a.top + a.height);\n  }\n}\n","export default {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden',\n};\n","import Point from './point';\nimport Classes from './classes';\n\nlet id = 0;\n\nclass ShuffleItem {\n  constructor(element, isRTL) {\n    id += 1;\n    this.id = id;\n    this.element = element;\n\n    /**\n     * Set correct direction of item\n     */\n    this.isRTL = isRTL;\n\n    /**\n     * Used to separate items for layout and shrink.\n     */\n    this.isVisible = true;\n\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n    this.isHidden = false;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n    this.element.removeAttribute('aria-hidden');\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n    this.element.setAttribute('aria-hidden', true);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.applyCss(this.isRTL ? ShuffleItem.Css.DIRECTION.rtl : ShuffleItem.Css.DIRECTION.ltr);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    Object.keys(obj).forEach((key) => {\n      this.element.style[key] = obj[key];\n    });\n  }\n\n  dispose() {\n    this.removeClasses([\n      Classes.HIDDEN,\n      Classes.VISIBLE,\n      Classes.SHUFFLE_ITEM,\n    ]);\n\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    visibility: 'visible',\n    willChange: 'transform',\n  },\n  DIRECTION: {\n    ltr: {\n      left: 0,\n    },\n    rtl: {\n      right: 0,\n    },\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible',\n    },\n    after: {\n      transitionDelay: '',\n    },\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0,\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: '',\n    },\n  },\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001,\n};\n\nexport default ShuffleItem;\n","import getNumber from './get-number';\n\nlet value = null;\nexport default () => {\n  if (value !== null) {\n    return value;\n  }\n\n  const element = document.body || document.documentElement;\n  const e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n\n  const { width } = window.getComputedStyle(e, null);\n  // Fix for issue #314\n  value = Math.round(getNumber(width)) === 10;\n\n  element.removeChild(e);\n\n  return value;\n};\n","import getNumber from './get-number';\nimport testComputedSize from './computed-size';\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nexport default function getNumberStyle(\n  element, style,\n  styles = window.getComputedStyle(element, null),\n) {\n  let value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft)\n      + getNumber(styles.paddingRight)\n      + getNumber(styles.borderLeftWidth)\n      + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop)\n      + getNumber(styles.paddingBottom)\n      + getNumber(styles.borderTopWidth)\n      + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n","/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  let n = array.length;\n\n  while (n) {\n    n -= 1;\n    const i = Math.floor(Math.random() * (n + 1));\n    const temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nconst defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // Custom sort function\n  compare: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element',\n};\n\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\nexport default function sorter(arr, options) {\n  // eslint-disable-next-line prefer-object-spread\n  const opts = Object.assign({}, defaults, options);\n  const original = Array.from(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort((a, b) => {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      const valA = opts.by(a[opts.key]);\n      const valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n","const transitions = {};\nconst eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nexport function cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nexport function onTransitionEnd(element, callback) {\n  const id = uniqueId();\n  const listener = (evt) => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element, listener };\n\n  return id;\n}\n","export default function arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","import Point from './point';\nimport Rect from './rect';\nimport arrayMax from './array-max';\nimport arrayMin from './array-min';\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  let columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nexport function getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  const available = [];\n\n  // For how many possible positions for this item there are.\n  for (let i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nexport function getShortColumn(positions, buffer) {\n  const minPosition = arrayMin(positions);\n  for (let i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nexport function getItemPosition({\n  itemSize, positions, gridSize, total, threshold, buffer,\n}) {\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  const setY = getAvailablePositions(positions, span, total);\n  const shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (let i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\nexport function getCenteredPositions(itemRects, containerWidth) {\n  const rowMap = {};\n\n  // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n  itemRects.forEach((itemRect) => {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  });\n\n  // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n  let rects = [];\n  const rows = [];\n  const centeredRows = [];\n  Object.keys(rowMap).forEach((key) => {\n    const itemRects = rowMap[key];\n    rows.push(itemRects);\n    const lastItem = itemRects[itemRects.length - 1];\n    const end = lastItem.left + lastItem.width;\n    const offset = Math.round((containerWidth - end) / 2);\n\n    let finalRects = itemRects;\n    let canMove = false;\n    if (offset > 0) {\n      const newRects = [];\n      canMove = itemRects.every((r) => {\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\n\n        // Check all current rects to make sure none overlap.\n        const noOverlap = !rects.some((r) => Rect.intersects(newRect, r));\n\n        newRects.push(newRect);\n        return noOverlap;\n      });\n\n      // If none of the rectangles overlapped, the whole group can be centered.\n      if (canMove) {\n        finalRects = newRects;\n      }\n    }\n\n    // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n    if (!canMove) {\n      let intersectingRect;\n      const hasOverlap = itemRects.some((itemRect) => rects.some((r) => {\n        const intersects = Rect.intersects(itemRect, r);\n        if (intersects) {\n          intersectingRect = r;\n        }\n        return intersects;\n      }));\n\n      // If there is any overlap, replace the overlapping row with the original.\n      if (hasOverlap) {\n        const rowIndex = centeredRows.findIndex((items) => items.includes(intersectingRect));\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  });\n\n  // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n    .sort((a, b) => (a.id - b.id))\n    .map((itemRect) => new Point(itemRect.left, itemRect.top));\n}\n","export default function arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","import TinyEmitter from 'tiny-emitter';\nimport matches from 'matches-selector';\nimport throttle from 'throttleit';\nimport parallel from 'array-parallel';\n\nimport Point from './point';\nimport Rect from './rect';\nimport ShuffleItem from './shuffle-item';\nimport Classes from './classes';\nimport getNumberStyle from './get-number-style';\nimport sorter from './sorter';\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\nimport {\n  getItemPosition,\n  getColumnSpan,\n  getAvailablePositions,\n  getShortColumn,\n  getCenteredPositions,\n} from './layout';\nimport arrayMax from './array-max';\nimport hyphenate from './hyphenate';\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n}\n\n// Used for unique instance variables\nlet id = 0;\n\nclass Shuffle extends TinyEmitter {\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element, options = {}) {\n    super();\n    // eslint-disable-next-line prefer-object-spread\n    this.options = Object.assign({}, Shuffle.options, options);\n\n    // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n    if (this.options.delimeter) {\n      this.options.delimiter = this.options.delimeter;\n    }\n\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    const el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = 'shuffle_' + id;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n    this.sortedItems = this.items;\n\n    this.options.sizer = this._getElementOption(this.options.sizer);\n\n    // Add class and invalidate styles\n    this.element.classList.add(Shuffle.Classes.BASE);\n\n    // Set initial css for each item\n    this._initItems(this.items);\n\n    // Bind resize events\n    this._onResize = this._getResizeFunction();\n    window.addEventListener('resize', this._onResize);\n\n    // If the page has not already emitted the `load` event, call layout on load.\n    // This avoids layout issues caused by images and fonts loading after the\n    // instance has been initialized.\n    if (document.readyState !== 'complete') {\n      const layout = this.layout.bind(this);\n      window.addEventListener('load', function onLoad() {\n        window.removeEventListener('load', onLoad);\n        layout();\n      });\n    }\n\n    // Get container css all in one request. Causes reflow\n    const containerCss = window.getComputedStyle(this.element, null);\n    const containerWidth = Shuffle.getSize(this.element).width;\n\n    // Add styles to the container if it doesn't have them.\n    this._validateStyles(containerCss);\n\n    // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n    this._setColumns(containerWidth);\n\n    // Kick off!\n    this.filter(this.options.group, this.options.initialSort);\n\n    // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n    this.setItemTransitions(this.items);\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\n  }\n\n  /**\n   * Returns a throttled and proxied function for the resize handler.\n   * @return {function}\n   * @private\n   */\n  _getResizeFunction() {\n    const resizeFunction = this._handleResize.bind(this);\n    return this.options.throttle\n      ? this.options.throttle(resizeFunction, this.options.throttleTime)\n      : resizeFunction;\n  }\n\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n    }\n\n    // Check for an element\n    if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n    }\n\n    // Check for jQuery object\n    if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    }\n\n    // Overflow has to be hidden.\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n\n  /**\n   * Filter the elements by a category.\n   * @param {string|string[]|function(Element):boolean} [category] Category to\n   *     filter by. If it's given, the last category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _filter(category = this.lastFilter, collection = this.items) {\n    const set = this._getFilteredSets(category, collection);\n\n    // Individually add/remove hidden/visible classes\n    this._toggleFilterClasses(set);\n\n    // Save the last filter in case elements are appended.\n    this.lastFilter = category;\n\n    // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n   * @param {ShuffleItem[]} items A collection of items to filter.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _getFilteredSets(category, items) {\n    let visible = [];\n    const hidden = [];\n\n    // category === 'all', add visible class to everything\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items;\n\n      // Loop through each item and use provided function to determine\n      // whether to hide it or not.\n    } else {\n      items.forEach((item) => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden,\n    };\n  }\n\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n  _doesPassFilter(category, element) {\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n    }\n\n    // Check each element's data-groups attribute against the given category.\n    const attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n    const keys = this.options.delimiter\n      ? attr.split(this.options.delimiter)\n      : JSON.parse(attr);\n\n    function testCategory(category) {\n      return keys.includes(category);\n    }\n\n    if (Array.isArray(category)) {\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n        return category.some(testCategory);\n      }\n      return category.every(testCategory);\n    }\n\n    return keys.includes(category);\n  }\n\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n  _toggleFilterClasses({ visible, hidden }) {\n    visible.forEach((item) => {\n      item.show();\n    });\n\n    hidden.forEach((item) => {\n      item.hide();\n    });\n  }\n\n  /**\n   * Set the initial css for each item\n   * @param {ShuffleItem[]} items Set to initialize.\n   * @private\n   */\n  _initItems(items) {\n    items.forEach((item) => {\n      item.init();\n    });\n  }\n\n  /**\n   * Remove element reference and styles.\n   * @param {ShuffleItem[]} items Set to dispose.\n   * @private\n   */\n  _disposeItems(items) {\n    items.forEach((item) => {\n      item.dispose();\n    });\n  }\n\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of a new Shuffle instance.\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n   * @protected\n   */\n  setItemTransitions(items) {\n    const { speed, easing } = this.options;\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\n\n    // Allow users to transtion other properties if they exist in the `before`\n    // css mapping of the shuffle item.\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map((k) => hyphenate(k));\n    const properties = positionProps.concat(cssProps).join();\n\n    items.forEach((item) => {\n      item.element.style.transitionDuration = speed + 'ms';\n      item.element.style.transitionTimingFunction = easing;\n      item.element.style.transitionProperty = properties;\n    });\n  }\n\n  _getItems() {\n    return Array.from(this.element.children)\n      .filter((el) => matches(el, this.options.itemSelector))\n      .map((el) => new ShuffleItem(el, this.options.isRTL));\n  }\n\n  /**\n   * Combine the current items array with a new one and sort it by DOM order.\n   * @param {ShuffleItem[]} items Items to track.\n   * @return {ShuffleItem[]}\n   */\n  _mergeNewItems(items) {\n    const children = Array.from(this.element.children);\n    return sorter(this.items.concat(items), {\n      by(element) {\n        return children.indexOf(element);\n      },\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter((item) => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter((item) => !item.isVisible);\n  }\n\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n  _getColumnSize(containerWidth, gutterSize) {\n    let size;\n\n    // If the columnWidth property is a function, then the grid is fluid\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth);\n\n      // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.options.sizer) {\n      size = Shuffle.getSize(this.options.sizer).width;\n\n      // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth;\n\n      // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width;\n\n      // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    }\n\n    // Don't let them set a column width of zero.\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n  _getGutterSize(containerWidth) {\n    let size;\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.options.sizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\n    const gutter = this._getGutterSize(containerWidth);\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n    // Widths given from getStyles are not precise enough...\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n\n  /**\n   * Adjust the height of the grid\n   */\n  _setContainerSize() {\n    this.element.style.height = this._getContainerSize() + 'px';\n  }\n\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n\n  /**\n   * Emit an event from this instance.\n   * @param {string} name Event name.\n   * @param {Object} [data={}] Optional object data.\n   */\n  _dispatch(name, data = {}) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    data.shuffle = this;\n    this.emit(name, data);\n  }\n\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n  _resetCols() {\n    let i = this.cols;\n    this.positions = [];\n    while (i) {\n      i -= 1;\n      this.positions.push(0);\n    }\n  }\n\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n  _layout(items) {\n    const itemPositions = this._getNextPositions(items);\n\n    let count = 0;\n    items.forEach((item, i) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      }\n\n      // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = itemPositions[i];\n      item.scale = ShuffleItem.Scale.VISIBLE;\n      item.isHidden = false;\n\n      // Clone the object so that the `before` object isn't modified when the\n      // transition delay is added.\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Return an array of Point instances representing the future positions of\n   * each item.\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\n   * @return {Point[]}\n   * @private\n   */\n  _getNextPositions(items) {\n    // If position data is going to be changed, add the item's size to the\n    // transformer to allow for calculations.\n    if (this.options.isCentered) {\n      const itemsData = items.map((item, i) => {\n        const itemSize = Shuffle.getSize(item.element, true);\n        const point = this._getItemPosition(itemSize);\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n      });\n\n      return this.getTransformedPositions(itemsData, this.containerWidth);\n    }\n\n    // If no transforms are going to happen, simply return an array of the\n    // future points of each item.\n    return items.map((item) => this._getItemPosition(Shuffle.getSize(item.element, true)));\n  }\n\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer,\n    });\n  }\n\n  /**\n   * Mutate positions before they're applied.\n   * @param {Rect[]} itemRects Item data objects.\n   * @param {number} containerWidth Width of the containing element.\n   * @return {Point[]}\n   * @protected\n   */\n  getTransformedPositions(itemRects, containerWidth) {\n    return getCenteredPositions(itemRects, containerWidth);\n  }\n\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {ShuffleItem[]} collection Collection to shrink.\n   * @private\n   */\n  _shrink(collection = this._getConcealedItems()) {\n    let count = 0;\n    collection.forEach((item) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }\n\n      // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n      if (item.isHidden) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Resize handler.\n   * @private\n   */\n  _handleResize() {\n    // If shuffle is disabled, destroyed, don't do anything\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    }\n\n    this.update();\n  }\n\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\n   *   scale and point properties.\n   * @param {Object} styleObject Extra styles that will be used in the transition.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @protected\n   */\n  getStylesForTransition(item, styleObject) {\n    // Clone the object to avoid mutating the original.\n    // eslint-disable-next-line prefer-object-spread\n    const styles = Object.assign({}, styleObject);\n\n    if (this.options.useTransforms) {\n      const sign = this.options.isRTL ? '-' : '';\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n      styles.transform = `translate(${sign}${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      if (this.options.isRTL) {\n        styles.right = item.point.x + 'px';\n      } else {\n        styles.left = item.point.x + 'px';\n      }\n      styles.top = item.point.y + 'px';\n    }\n\n    return styles;\n  }\n\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {function} itemCallback Callback for the item.\n   * @param {function} done Callback to notify `parallel` that this one is done.\n   */\n  _whenTransitionDone(element, itemCallback, done) {\n    const id = onTransitionEnd(element, (evt) => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {function} A function to be called with a `done` function.\n   */\n  _getTransitionFunction(opts) {\n    return (done) => {\n      opts.item.applyCss(opts.styles);\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    const hasSpeed = this.options.speed > 0;\n    const hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n      this._dispatch(Shuffle.EventType.LAYOUT);\n\n      // A call to layout happened, but none of the newly visible items will\n      // change position or the transition duration is zero, which will not trigger\n      // the transitionend event.\n    } else {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    // Remove everything in the style queue\n    this._queue.length = 0;\n  }\n\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Object[]} transitions Array of transition objects.\n   */\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true;\n\n    // Create an array of functions to be called.\n    const callbacks = transitions.map((obj) => this._getTransitionFunction(obj));\n\n    parallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd);\n\n    // Reset the array.\n    this._transitions.length = 0;\n\n    // Show it's no longer active.\n    this.isTransitioning = false;\n  }\n\n  /**\n   * Apply styles without a transition.\n   * @param {Object[]} objects Array of transition objects.\n   * @private\n   */\n  _styleImmediately(objects) {\n    if (objects.length) {\n      const elements = objects.map((obj) => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach((obj) => {\n          obj.item.applyCss(obj.styles);\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n   */\n  filter(category, sortOptions) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || (category && category.length === 0)) {\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n    }\n\n    this._filter(category);\n\n    // Shrink each hidden item\n    this._shrink();\n\n    // How many visible elements?\n    this._updateItemCount();\n\n    // Update transforms on visible elements so they will animate to their new positions.\n    this.sort(sortOptions);\n  }\n\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n   */\n  sort(sortOptions = this.lastSort) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    const items = sorter(this._getFilteredItems(), sortOptions);\n    this.sortedItems = items;\n\n    this._layout(items);\n\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n    this._processQueue();\n\n    // Adjust the height of the container.\n    this._setContainerSize();\n\n    this.lastSort = sortOptions;\n  }\n\n  /**\n   * Reposition everything.\n   * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n   */\n  update(isOnlyLayout = false) {\n    if (this.isEnabled) {\n      if (!isOnlyLayout) {\n        // Get updated colCount\n        this._setColumns();\n      }\n\n      // Layout items\n      this.sort();\n    }\n  }\n\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n  layout() {\n    this.update(true);\n  }\n\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Element[]} newItems Collection of new items.\n   */\n  add(newItems) {\n    const items = arrayUnique(newItems).map((el) => new ShuffleItem(el, this.options.isRTL));\n\n    // Add classes and set initial positions.\n    this._initItems(items);\n\n    // Determine which items will go with the current filter.\n    this._resetCols();\n\n    const allItems = this._mergeNewItems(items);\n    const sortedItems = sorter(allItems, this.lastSort);\n    const allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n    const isNewItem = (item) => items.includes(item);\n    const applyHiddenState = (item) => {\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n      item.applyCss(ShuffleItem.Css.HIDDEN.before);\n      item.applyCss(ShuffleItem.Css.HIDDEN.after);\n    };\n\n    // Layout all items again so that new items get positions.\n    // Synchonously apply positions.\n    const itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n    allSortedItemsSet.visible.forEach((item, i) => {\n      if (isNewItem(item)) {\n        item.point = itemPositions[i];\n        applyHiddenState(item);\n        item.applyCss(this.getStylesForTransition(item, {}));\n      }\n    });\n\n    allSortedItemsSet.hidden.forEach((item) => {\n      if (isNewItem(item)) {\n        applyHiddenState(item);\n      }\n    });\n\n    // Cause layout so that the styles above are applied.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Add transition to each item.\n    this.setItemTransitions(items);\n\n    // Update the list of items.\n    this.items = this._mergeNewItems(items);\n\n    // Update layout/visibility of new and old items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n  disable() {\n    this.isEnabled = false;\n  }\n\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n  enable(isUpdateLayout = true) {\n    this.isEnabled = true;\n    if (isUpdateLayout) {\n      this.update();\n    }\n  }\n\n  /**\n   * Remove 1 or more shuffle items.\n   * @param {Element[]} elements An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle instance.\n   */\n  remove(elements) {\n    if (!elements.length) {\n      return;\n    }\n\n    const collection = arrayUnique(elements);\n\n    const oldItems = collection\n      .map((element) => this.getItemByElement(element))\n      .filter((item) => !!item);\n\n    const handleLayout = () => {\n      this._disposeItems(oldItems);\n\n      // Remove the collection in the callback\n      collection.forEach((element) => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\n    };\n\n    // Hide collection first.\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems,\n    });\n\n    this._shrink(oldItems);\n\n    this.sort();\n\n    // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n    this.items = this.items.filter((item) => !oldItems.includes(item));\n    this._updateItemCount();\n\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n   */\n  getItemByElement(element) {\n    return this.items.find((item) => item.element === element);\n  }\n\n  /**\n   * Dump the elements currently stored and reinitialize all child elements which\n   * match the `itemSelector`.\n   */\n  resetItems() {\n    // Remove refs to current items.\n    this._disposeItems(this.items);\n    this.isInitialized = false;\n\n    // Find new items in the DOM.\n    this.items = this._getItems();\n\n    // Set initial styles on the new items.\n    this._initItems(this.items);\n\n    this.once(Shuffle.EventType.LAYOUT, () => {\n      // Add transition to each item.\n      this.setItemTransitions(this.items);\n      this.isInitialized = true;\n    });\n\n    // Lay out all items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n  destroy() {\n    this._cancelMovement();\n    window.removeEventListener('resize', this._onResize);\n\n    // Reset container styles\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style');\n\n    // Reset individual item styles\n    this._disposeItems(this.items);\n\n    this.items.length = 0;\n    this._transitions.length = 0;\n\n    // Null DOM references\n    this.options.sizer = null;\n    this.element = null;\n\n    // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n    this.isDestroyed = true;\n    this.isEnabled = false;\n  }\n\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins=false] Whether to include margins.\n   * @return {{width: number, height: number}} The width and height.\n   */\n  static getSize(element, includeMargins = false) {\n    // Store the styles so that they can be used by others without asking for it again.\n    const styles = window.getComputedStyle(element, null);\n    let width = getNumberStyle(element, 'width', styles);\n    let height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Element[]} elements DOM elements that won't be transitioned.\n   * @param {function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n  static _skipTransitions(elements, callback) {\n    const zero = '0ms';\n\n    // Save current duration and delay.\n    const data = elements.map((element) => {\n      const { style } = element;\n      const duration = style.transitionDuration;\n      const delay = style.transitionDelay;\n\n      // Set the duration to zero so it happens immediately\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n\n      return {\n        duration,\n        delay,\n      };\n    });\n\n    callback();\n\n    // Cause forced synchronous layout.\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Put the duration back\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n}\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/** @enum {string} */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed',\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/** @enum {string} */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all',\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n\n  // Attempt to center grid items in each row.\n  isCentered: false,\n\n  // Attempt to align grid items to right.\n  isRTL: false,\n\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true,\n};\n\nShuffle.Point = Point;\nShuffle.Rect = Rect;\n\n// Expose for testing. Hack at your own risk.\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\n\nexport default Shuffle;\n","/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nexport default function hyphenate(str) {\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\n}\n"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","proto","Element","vendor","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","el","selector","nodeType","nodes","parentNode","querySelectorAll","throttleit","func","wait","args","rtn","timeoutID","last","delta","Date","setTimeout","noop","getNumber","value","parseFloat","Point","x","y","a","b","Rect","w","h","id","left","top","width","height","BASE","SHUFFLE_ITEM","VISIBLE","HIDDEN","ShuffleItem","element","isRTL","isVisible","isHidden","classList","remove","Classes","add","removeAttribute","setAttribute","addClasses","applyCss","Css","INITIAL","DIRECTION","rtl","ltr","scale","Scale","point","classes","forEach","className","_this","_this2","obj","Object","keys","key","_this3","style","removeClasses","position","visibility","willChange","right","before","opacity","after","transitionDelay","document","body","documentElement","createElement","cssText","appendChild","window","getComputedStyle","Math","round","removeChild","getNumberStyle","styles","testComputedSize","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","defaults","reverse","by","compare","randomize","sorter","arr","options","opts","assign","original","Array","from","revert","array","n","floor","random","temp","sort","valA","valB","undefined","transitions","eventName","count","cancelTransitionEnd","removeEventListener","onTransitionEnd","evt","currentTarget","target","addEventListener","arrayMax","max","getColumnSpan","itemWidth","columnWidth","columns","threshold","columnSpan","abs","min","ceil","getAvailablePositions","positions","available","getShortColumn","buffer","minPosition","getCenteredPositions","itemRects","containerWidth","rowMap","itemRect","rects","rows","centeredRows","intersectingRect","lastItem","end","offset","finalRects","canMove","newRects","every","r","newRect","noOverlap","some","intersects","rowIndex","findIndex","items","includes","splice","concat","map","arrayUnique","Set","Shuffle","delimeter","delimiter","lastSort","group","ALL_ITEMS","lastFilter","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","_getElementOption","TypeError","_init","_getItems","sortedItems","sizer","_initItems","_onResize","_getResizeFunction","readyState","layout","bind","onLoad","containerCss","getSize","_validateStyles","_setColumns","filter","initialSort","offsetWidth","setItemTransitions","transition","speed","easing","resizeFunction","_handleResize","throttle","throttleTime","option","querySelector","jquery","overflow","category","collection","set","_getFilteredSets","_toggleFilterClasses","visible","hidden","item","_doesPassFilter","attr","getAttribute","FILTER_ATTRIBUTE_KEY","split","JSON","parse","testCategory","isArray","filterMode","FilterMode","ANY","show","hide","init","dispose","visibleItems","_getFilteredItems","positionProps","useTransforms","cssProps","k","replace","str","m1","toLowerCase","properties","join","transitionDuration","transitionTimingFunction","transitionProperty","children","itemSelector","indexOf","gutterSize","size","gutterWidth","gutter","_getGutterSize","_getColumnSize","calculatedColumns","columnThreshold","cols","colWidth","_getContainerSize","index","staggerAmount","staggerAmountMax","shuffle","itemPositions","_getNextPositions","equals","_this4","getStylesForTransition","_getStaggerAmount","isCentered","itemsData","itemSize","_this5","_getItemPosition","getTransformedPositions","gridSize","total","span","setY","shortColumnIndex","setHeight","getItemPosition","_getConcealedItems","_this6","update","styleObject","sign","roundTransforms","transform","itemCallback","done","_this7","_whenTransitionDone","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","_dispatch","EventType","LAYOUT","fns","context","pending","finished","results","maybeDone","err","result","parallel","_this8","_getTransitionFunction","_movementFinished","objects","elements","_skipTransitions","sortOptions","_filter","_shrink","_updateItemCount","_resetCols","_layout","_processQueue","_setContainerSize","isOnlyLayout","newItems","_this9","_mergeNewItems","allSortedItemsSet","isNewItem","applyHiddenState","isUpdateLayout","oldItems","_this10","getItemByElement","_disposeItems","REMOVED","find","_this11","includeMargins","marginLeft","marginRight","marginTop","marginBottom","duration","delay","TinyEmitter","ALL","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn","__getCenteredPositions"],"mappings":"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"}