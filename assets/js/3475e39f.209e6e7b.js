"use strict";(self.webpackChunkshuffle_docs=self.webpackChunkshuffle_docs||[]).push([[699],{9666:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"column-widths","title":"How column widths work","description":"There are 4 options for defining the width of the columns:","source":"@site/docs/column-widths.md","sourceDirName":".","slug":"/column-widths","permalink":"/Shuffle/docs/column-widths","draft":false,"unlisted":false,"editUrl":"https://github.com/Vestride/Shuffle/tree/main/apps/website/docs/docs/column-widths.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/Shuffle/docs/getting-started"},"next":{"title":"Configuring Shuffle","permalink":"/Shuffle/docs/configuration"}}');var i=t(1085),r=t(1184);const l={sidebar_position:3},o="How column widths work",c={},h=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"how-column-widths-work",children:"How column widths work"})}),"\n",(0,i.jsx)(n.p,{children:"There are 4 options for defining the width of the columns:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use a ",(0,i.jsx)(n.strong,{children:"sizer"})," element. This is the easiest way to specify column and gutter widths. Add the sizer element and make it 1 column wide. Shuffle will measure the ",(0,i.jsx)(n.code,{children:"width"})," and ",(0,i.jsx)(n.code,{children:"margin-left"})," of this ",(0,i.jsx)(n.code,{children:"sizer"})," element each time the grid resizes. This is awesome for responsive or fluid grids where the width of a column is a percentage."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const shuffleInstance = new Shuffle(element, {\n  itemSelector: '.picture-item',\n  // highlight-next-line\n  sizer: '.js-shuffle-sizer',\n});\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use a ",(0,i.jsx)(n.strong,{children:"function"}),". When a function is used, its first parameter will be the width of the shuffle element. You need to return the column width for shuffle to use (in pixels)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const shuffleInstance = new Shuffle(element, {\n  itemSelector: '.picture-item',\n  // highlight-next-line\n  columnWidth: (containerWidth) => 0.18 * containerWidth,\n});\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"number"}),". This will explicitly set the column width to your number (in pixels)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const shuffleInstance = new Shuffle(element, {\n  itemSelector: '.picture-item',\n  // highlight-next-line\n  columnWidth: 200,\n});\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"By default, shuffle will use the width of the first item to calculate the column width."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const shuffleInstance = new Shuffle(element, {\n  itemSelector: '.picture-item',\n});\n"})}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(4041);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);