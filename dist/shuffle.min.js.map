{"version":3,"file":"shuffle.min.js","sources":["../node_modules/matches-selector/index.js","../node_modules/xtend/immutable.js","../node_modules/throttleit/index.js","../node_modules/array-parallel/index.js","../src/get-number.js","../src/get-number-style.js","../src/sorter.js","../src/on-transition-end.js","../src/array-max.js","../src/array-min.js","../src/layout.js","../src/shuffle.js","../node_modules/custom-event-polyfill/custom-event-polyfill.js","../node_modules/array-uniq/index.js","../src/point.js","../src/classes.js","../src/shuffle-item.js","../src/computed-size.js"],"sourcesContent":["'use strict';\n\nvar proto = Element.prototype;\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nexport default function getNumber(value) {\n  return parseFloat(value) || 0;\n}\n","import getNumber from './get-number';\nimport COMPUTED_SIZE_INCLUDES_PADDING from './computed-size';\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nexport default function getNumberStyle(element, style,\n    styles = window.getComputedStyle(element, null)) {\n  var value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!COMPUTED_SIZE_INCLUDES_PADDING && style === 'width') {\n    value += getNumber(styles.paddingLeft) +\n      getNumber(styles.paddingRight) +\n      getNumber(styles.borderLeftWidth) +\n      getNumber(styles.borderRightWidth);\n  } else if (!COMPUTED_SIZE_INCLUDES_PADDING && style === 'height') {\n    value += getNumber(styles.paddingTop) +\n      getNumber(styles.paddingBottom) +\n      getNumber(styles.borderTopWidth) +\n      getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n","import xtend from 'xtend';\n\n// http://stackoverflow.com/a/962890/373422\nfunction randomize(array) {\n  var tmp;\n  var current;\n  let top = array.length;\n\n  if (!top) {\n    return array;\n  }\n\n  while (--top) {\n    current = Math.floor(Math.random() * (top + 1));\n    tmp = array[current];\n    array[current] = array[top];\n    array[top] = tmp;\n  }\n\n  return array;\n}\n\nlet defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element',\n};\n\n// You can return `undefined` from the `by` function to revert to DOM order.\nexport default function sorter(arr, options) {\n  let opts = xtend(defaults, options);\n  let original = [].slice.call(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort(function (a, b) {\n\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      let valA = opts.by(a[opts.key]);\n      let valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n","let transitions = {};\nlet eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  return eventName + count++;\n}\n\nexport function onTransitionEnd(element, callback) {\n  let id = uniqueId();\n  let listener = (evt) => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element, listener };\n\n  return id;\n}\n\nexport function cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n","export default function arrayMax(array) {\n  return Math.max.apply(Math, array);\n}\n","export default function arrayMin(array) {\n  return Math.min.apply(Math, array);\n}\n","'use strict';\n\nimport Point from './point';\nimport arrayMax from './array-max';\nimport arrayMin from './array-min';\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nexport function getItemPosition({ itemSize, positions, gridSize, total, threshold, buffer }) {\n  var span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  var setY = getAvailablePositions(positions, span, total);\n  var shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  var point = new Point(\n    Math.round(gridSize * shortColumnIndex),\n    Math.round(setY[shortColumnIndex]));\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  var setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (var i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  var columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nexport function getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 0]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 0]\n  //          |\n  //          *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  var available = [];\n\n  // For how many possible positions for this item there are.\n  for (var i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nexport function getShortColumn(positions, buffer) {\n  var minPosition = arrayMin(positions);\n  for (var i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n","import 'custom-event-polyfill';\nimport matches from 'matches-selector';\nimport arrayUnique from 'array-uniq';\nimport xtend from 'xtend';\nimport throttle from 'throttleit';\nimport parallel from 'array-parallel';\nimport Point from './point';\nimport ShuffleItem from './shuffle-item';\nimport Classes from './classes';\nimport getNumberStyle from './get-number-style';\nimport sorter from './sorter';\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\nimport { getItemPosition, getColumnSpan, getAvailablePositions, getShortColumn } from './layout';\nimport arrayMax from './array-max';\n\nfunction toArray(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n}\n\nfunction arrayIncludes(array, obj) {\n  if (arguments.length === 2) {\n    return arrayIncludes(array)(obj);\n  }\n\n  return function (obj) {\n    return array.indexOf(obj) > -1;\n  };\n}\n\n// Used for unique instance variables\nlet id = 0;\n\nclass Shuffle {\n\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element, options = {}) {\n    this.options = xtend(Shuffle.options, options);\n\n    this.useSizer = false;\n    this.lastSort = {};\n    this.group = this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    element = this._getElementOption(element);\n\n    if (!element) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = element;\n    this.id = 'shuffle_' + id++;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n\n    this.options.sizer = this._getElementOption(this.options.sizer);\n\n    if (this.options.sizer) {\n      this.useSizer = true;\n    }\n\n    // Add class and invalidate styles\n    this.element.classList.add(Shuffle.Classes.BASE);\n\n    // Set initial css for each item\n    this._initItems();\n\n    // Bind resize events\n    this._onResize = this._getResizeFunction();\n    window.addEventListener('resize', this._onResize);\n\n    // Get container css all in one request. Causes reflow\n    var containerCss = window.getComputedStyle(this.element, null);\n    var containerWidth = Shuffle.getSize(this.element).width;\n\n    // Add styles to the container if it doesn't have them.\n    this._validateStyles(containerCss);\n\n    // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n    this._setColumns(containerWidth);\n\n    // Kick off!\n    this.filter(this.options.group, this.options.initialSort);\n\n    // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n    this.element.offsetWidth; // jshint ignore: line\n    this._setTransitions();\n    this.element.style.transition = 'height ' + this.options.speed + 'ms ' + this.options.easing;\n  }\n\n  /**\n   * Returns a throttled and proxied function for the resize handler.\n   * @return {Function}\n   * @private\n   */\n  _getResizeFunction() {\n    var resizeFunction = this._handleResize.bind(this);\n    return this.options.throttle ?\n        this.options.throttle(resizeFunction, this.options.throttleTime) :\n        resizeFunction;\n  }\n\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n\n    // Check for an element\n    } else if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n\n    // Check for jQuery object\n    } else if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    }\n\n    // Overflow has to be hidden.\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n\n  /**\n   * Filter the elements by a category.\n   * @param {string} [category] Category to filter by. If it's given, the last\n   *     category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {!{visible: Array, hidden: Array}}\n   * @private\n   */\n  _filter(category = this.lastFilter, collection = this.items) {\n    var set = this._getFilteredSets(category, collection);\n\n    // Individually add/remove hidden/visible classes\n    this._toggleFilterClasses(set);\n\n    // Save the last filter in case elements are appended.\n    this.lastFilter = category;\n\n    // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|Function} category Category or function to filter by.\n   * @param {Array.<Element>} items A collection of items to filter.\n   * @return {!{visible: Array, hidden: Array}}\n   * @private\n   */\n  _getFilteredSets(category, items) {\n    let visible = [];\n    let hidden = [];\n\n    // category === 'all', add visible class to everything\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items;\n\n    // Loop through each item and use provided function to determine\n    // whether to hide it or not.\n    } else {\n      items.forEach((item) => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden,\n    };\n  }\n\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|Function} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n  _doesPassFilter(category, element) {\n\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n\n    // Check each element's data-groups attribute against the given category.\n    } else {\n      let attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n      let keys = this.options.delimeter ?\n          attr.split(this.options.delimeter) :\n          JSON.parse(attr);\n\n      if (Array.isArray(category)) {\n        return category.some(arrayIncludes(keys));\n      }\n\n      return arrayIncludes(keys, category);\n    }\n  }\n\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n  _toggleFilterClasses({ visible, hidden }) {\n    visible.forEach((item) => {\n      item.show();\n    });\n\n    hidden.forEach((item) => {\n      item.hide();\n    });\n  }\n\n  /**\n   * Set the initial css for each item\n   * @param {Array.<ShuffleItem>} [items] Optionally specifiy at set to initialize.\n   * @private\n   */\n  _initItems(items = this.items) {\n    items.forEach((item) => {\n      item.init();\n    });\n  }\n\n  /**\n   * Remove element reference and styles.\n   * @private\n   */\n  _disposeItems(items = this.items) {\n    items.forEach((item) => {\n      item.dispose();\n    });\n  }\n\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of Shuffle.\n   * @param {Array.<ShuffleItem>} items Shuffle items to set transitions on.\n   * @private\n   */\n  _setTransitions(items = this.items) {\n    let speed = this.options.speed;\n    let easing = this.options.easing;\n\n    var str;\n    if (this.options.useTransforms) {\n      str = 'transform ' + speed + 'ms ' + easing +\n        ', opacity ' + speed + 'ms ' + easing;\n    } else {\n      str = 'top ' + speed + 'ms ' + easing +\n        ', left ' + speed + 'ms ' + easing +\n        ', opacity ' + speed + 'ms ' + easing;\n    }\n\n    items.forEach((item) => {\n      item.element.style.transition = str;\n    });\n  }\n\n  _getItems() {\n    return toArray(this.element.children)\n      .filter(el => matches(el, this.options.itemSelector))\n      .map(el => new ShuffleItem(el));\n  }\n\n  /**\n   * When new elements are added to the shuffle container, update the array of\n   * items because that is the order `_layout` calls them.\n   */\n  _updateItemsOrder() {\n    let children = this.element.children;\n    this.items = sorter(this.items, {\n      by(element) {\n        return Array.prototype.indexOf.call(children, element);\n      },\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter(item => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter(item => !item.isVisible);\n  }\n\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n  _getColumnSize(containerWidth, gutterSize) {\n    var size;\n\n    // If the columnWidth property is a function, then the grid is fluid\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth);\n\n    // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.useSizer) {\n      size = Shuffle.getSize(this.options.sizer).width;\n\n    // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth;\n\n    // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width;\n\n    // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    }\n\n    // Don't let them set a column width of zero.\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n  _getGutterSize(containerWidth) {\n    var size;\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.useSizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\n    var gutter = this._getGutterSize(containerWidth);\n    var columnWidth = this._getColumnSize(containerWidth, gutter);\n    var calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n    // Widths given from getStyles are not precise enough...\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) <\n        this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n\n  /**\n   * Adjust the height of the grid\n   */\n  _setContainerSize() {\n    this.element.style.height = this._getContainerSize() + 'px';\n  }\n\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n\n  /**\n   * @return {boolean} Whether the event was prevented or not.\n   */\n  _dispatch(name, details = {}) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    details.shuffle = this;\n    return !this.element.dispatchEvent(new CustomEvent(name, {\n      bubbles: true,\n      cancelable: false,\n      detail: details,\n    }));\n  }\n\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n  _resetCols() {\n    var i = this.cols;\n    this.positions = [];\n    while (i--) {\n      this.positions.push(0);\n    }\n  }\n\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {Array.<ShuffleItem>} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n  _layout(items) {\n    let count = 0;\n    items.forEach((item) => {\n      var currPos = item.point;\n      var currScale = item.scale;\n      var itemSize = Shuffle.getSize(item.element, true);\n      var pos = this._getItemPosition(itemSize);\n\n      function callback() {\n        item.element.style.transitionDelay = '';\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      }\n\n      // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n      if (Point.equals(currPos, pos) && currScale === ShuffleItem.Scale.VISIBLE) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = pos;\n      item.scale = ShuffleItem.Scale.VISIBLE;\n\n      // Use xtend here to clone the object so that the `before` object isn't\n      // modified when the transition delay is added.\n      let styles = xtend(ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count++;\n    });\n  }\n\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer,\n    });\n  }\n\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {Array.<ShuffleItem>} collection Collection to shrink.\n   * @private\n   */\n  _shrink(collection = this._getConcealedItems()) {\n    let count = 0;\n    collection.forEach((item) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }\n\n      // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n      if (item.scale === ShuffleItem.Scale.HIDDEN) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n\n      let styles = xtend(ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count++;\n    });\n  }\n\n  /**\n   * Resize handler.\n   * @private\n   */\n  _handleResize() {\n    // If shuffle is disabled, destroyed, don't do anything\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    }\n\n    // Will need to check height in the future if it's layed out horizontaly\n    var containerWidth = Shuffle.getSize(this.element).width;\n\n    // containerWidth hasn't changed, don't do anything\n    if (containerWidth === this.containerWidth) {\n      return;\n    }\n\n    this.update();\n  }\n\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {Object} obj Transition options.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @private\n   */\n  _getStylesForTransition({ item, styles }) {\n    if (!styles.transitionDelay) {\n      styles.transitionDelay = '0ms';\n    }\n\n    let x = item.point.x;\n    let y = item.point.y;\n\n    if (this.options.useTransforms) {\n      styles.transform = `translate(${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      styles.left = x + 'px';\n      styles.top = y + 'px';\n    }\n\n    return styles;\n  }\n\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {Function} itemCallback Callback for the item.\n   * @param {Function} done Callback to notify `parallel` that this one is done.\n   */\n  _whenTransitionDone(element, itemCallback, done) {\n    let id = onTransitionEnd(element, (evt) => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {Function} A function to be called with a `done` function.\n   */\n  _getTransitionFunction(opts) {\n    return (done) => {\n      opts.item.applyCss(this._getStylesForTransition(opts));\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    let hasSpeed = this.options.speed > 0;\n    let hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n      this._dispatchLayout();\n\n    // A call to layout happened, but none of the newly visible items will\n    // change position or the transition duration is zero, which will not trigger\n    // the transitionend event.\n    } else {\n      this._dispatchLayout();\n    }\n\n    // Remove everything in the style queue\n    this._queue.length = 0;\n  }\n\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Array.<Object>} transitions Array of transition objects.\n   */\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true;\n\n    // Create an array of functions to be called.\n    let callbacks = transitions.map(obj => this._getTransitionFunction(obj));\n\n    parallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd);\n\n    // Reset the array.\n    this._transitions.length = 0;\n\n    // Show it's no longer active.\n    this.isTransitioning = false;\n  }\n\n  /**\n   * Apply styles without a transition.\n   * @param {Array.<Object>} objects Array of transition objects.\n   * @private\n   */\n  _styleImmediately(objects) {\n    if (objects.length) {\n      let elements = objects.map(obj => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach((obj) => {\n          obj.item.applyCss(this._getStylesForTransition(obj));\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n    this._dispatchLayout();\n  }\n\n  _dispatchLayout() {\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|Function|Array.<string>} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {Object} [sortObj] A sort object which can sort the visible set\n   */\n  filter(category, sortObj) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || (category && category.length === 0)) {\n      category = Shuffle.ALL_ITEMS;\n    }\n\n    this._filter(category);\n\n    // Shrink each hidden item\n    this._shrink();\n\n    // How many visible elements?\n    this._updateItemCount();\n\n    // Update transforms on visible elements so they will animate to their new positions.\n    this.sort(sortObj);\n  }\n\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {Object} opts the options object for the sorted plugin\n   */\n  sort(opts = this.lastSort) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    var items = this._getFilteredItems();\n    items = sorter(items, opts);\n\n    this._layout(items);\n\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n    this._processQueue();\n\n    // Adjust the height of the container.\n    this._setContainerSize();\n\n    this.lastSort = opts;\n  }\n\n  /**\n   * Reposition everything.\n   * @param {boolean} isOnlyLayout If true, column and gutter widths won't be\n   *     recalculated.\n   */\n  update(isOnlyLayout) {\n    if (this.isEnabled) {\n\n      if (!isOnlyLayout) {\n        // Get updated colCount\n        this._setColumns();\n      }\n\n      // Layout items\n      this.sort();\n    }\n  }\n\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n  layout() {\n    this.update(true);\n  }\n\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Array.<Element>} newItems Collection of new items.\n   */\n  add(newItems) {\n    newItems = arrayUnique(newItems).map(el => new ShuffleItem(el));\n\n    // Add classes and set initial positions.\n    this._initItems(newItems);\n\n    // Add transition to each item.\n    this._setTransitions(newItems);\n\n    // Update the list of items.\n    this.items = this.items.concat(newItems);\n    this._updateItemsOrder();\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n  disable() {\n    this.isEnabled = false;\n  }\n\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n  enable(isUpdateLayout) {\n    this.isEnabled = true;\n    if (isUpdateLayout !== false) {\n      this.update();\n    }\n  }\n\n  /**\n   * Remove 1 or more shuffle items\n   * @param {Array.<Element>} collection An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle object\n   */\n  remove(collection) {\n    if (!collection.length) {\n      return;\n    }\n\n    collection = arrayUnique(collection);\n\n    let oldItems = collection\n      .map(element => this.getItemByElement(element))\n      .filter(item => !!item);\n\n    let handleLayout = () => {\n      this.element.removeEventListener(Shuffle.EventType.LAYOUT, handleLayout);\n      this._disposeItems(oldItems);\n\n      // Remove the collection in the callback\n      collection.forEach((element) => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\n\n      // Let it get garbage collected\n      collection = null;\n      oldItems = null;\n    };\n\n    // Hide collection first.\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems,\n    });\n\n    this._shrink(oldItems);\n\n    this.sort();\n\n    // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n    this.items = this.items.filter(item => !arrayIncludes(oldItems, item));\n    this._updateItemCount();\n\n    this.element.addEventListener(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or null if it's not found.\n   */\n  getItemByElement(element) {\n    for (var i = this.items.length - 1; i >= 0; i--) {\n      if (this.items[i].element === element) {\n        return this.items[i];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n  destroy() {\n    this._cancelMovement();\n    window.removeEventListener('resize', this._onResize);\n\n    // Reset container styles\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style');\n\n    // Reset individual item styles\n    this._disposeItems();\n\n    // Null DOM references\n    this.items = null;\n    this.options.sizer = null;\n    this.element = null;\n    this._transitions = null;\n\n    // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n    this.isDestroyed = true;\n  }\n\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins] Whether to include margins. Default is false.\n   * @return {{width: number, height: number}} The width and height.\n   */\n  static getSize(element, includeMargins) {\n    // Store the styles so that they can be used by others without asking for it again.\n    var styles = window.getComputedStyle(element, null);\n    var width = getNumberStyle(element, 'width', styles);\n    var height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      var marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      var marginRight = getNumberStyle(element, 'marginRight', styles);\n      var marginTop = getNumberStyle(element, 'marginTop', styles);\n      var marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Array.<Element>} elements DOM elements that won't be transitioned.\n   * @param {Function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n  static _skipTransitions(elements, callback) {\n    let zero = '0ms';\n\n    // Save current duration and delay.\n    let data = elements.map((element) => {\n      let style = element.style;\n      let duration = style.transitionDuration;\n      let delay = style.transitionDelay;\n\n      // Set the duration to zero so it happens immediately\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n\n      return {\n        duration,\n        delay,\n      };\n    });\n\n    callback();\n\n    // Cause reflow.\n    elements[0].offsetWidth; // jshint ignore:line\n\n    // Put the duration back\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n}\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/**\n * @enum {string}\n */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed',\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'ease',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimeter\n  // to ','.\n  delimeter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle: throttle,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 250,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n};\n\n// Expose for testing. Hack at your own risk.\nShuffle.__Point = Point;\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\n\nexport default Shuffle;\n","// Polyfill for creating CustomEvents on IE9/10/11\n\n// code pulled from:\n// https://github.com/d4tocchini/customevent-polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent#Polyfill\n\ntry {\n    var ce = new window.CustomEvent('test');\n    ce.preventDefault();\n    if (ce.defaultPrevented !== true) {\n        // IE has problems with .preventDefault() on custom events\n        // http://stackoverflow.com/questions/23349191\n        throw new Error('Could not prevent default');\n    }\n} catch(e) {\n  var CustomEvent = function(event, params) {\n    var evt, origPrevent;\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: undefined\n    };\n\n    evt = document.createEvent(\"CustomEvent\");\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    origPrevent = evt.preventDefault;\n    evt.preventDefault = function () {\n      origPrevent.call(this);\n      try {\n        Object.defineProperty(this, 'defaultPrevented', {\n          get: function () {\n            return true;\n          }\n        });\n      } catch(e) {\n        this.defaultPrevented = true;\n      }\n    };\n    return evt;\n  };\n\n  CustomEvent.prototype = window.Event.prototype;\n  window.CustomEvent = CustomEvent; // expose definition to window\n}\n","'use strict';\n\n// there's 3 implementations written in increasing order of efficiency\n\n// 1 - no Set type is defined\nfunction uniqNoSet(arr) {\n\tvar ret = [];\n\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tif (ret.indexOf(arr[i]) === -1) {\n\t\t\tret.push(arr[i]);\n\t\t}\n\t}\n\n\treturn ret;\n}\n\n// 2 - a simple Set type is defined\nfunction uniqSet(arr) {\n\tvar seen = new Set();\n\treturn arr.filter(function (el) {\n\t\tif (!seen.has(el)) {\n\t\t\tseen.add(el);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t});\n}\n\n// 3 - a standard Set type is defined and it has a forEach method\nfunction uniqSetWithForEach(arr) {\n\tvar ret = [];\n\n\t(new Set(arr)).forEach(function (el) {\n\t\tret.push(el);\n\t});\n\n\treturn ret;\n}\n\n// V8 currently has a broken implementation\n// https://github.com/joyent/node/issues/8449\nfunction doesForEachActuallyWork() {\n\tvar ret = false;\n\n\t(new Set([true])).forEach(function (el) {\n\t\tret = el;\n\t});\n\n\treturn ret === true;\n}\n\nif ('Set' in global) {\n\tif (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) {\n\t\tmodule.exports = uniqSetWithForEach;\n\t} else {\n\t\tmodule.exports = uniqSet;\n\t}\n} else {\n\tmodule.exports = uniqNoSet;\n}\n","import getNumber from './get-number';\n\n/**\n * Represents a coordinate pair.\n * @param {number} [x=0] X.\n * @param {number} [y=0] Y.\n */\nconst Point = function (x, y) {\n  this.x = getNumber(x);\n  this.y = getNumber(y);\n};\n\n/**\n * Whether two points are equal.\n * @param {Point} a Point A.\n * @param {Point} b Point B.\n * @return {boolean}\n */\nPoint.equals = function (a, b) {\n  return a.x === b.x && a.y === b.y;\n};\n\nexport default Point;\n","export default {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden',\n};\n","import Point from './point';\nimport Classes from './classes';\n\nlet id = 0;\n\nclass ShuffleItem {\n  constructor(element) {\n    this.id = id++;\n    this.element = element;\n    this.isVisible = true;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    for (var key in obj) {\n      this.element.style[key] = obj[key];\n    }\n  }\n\n  dispose() {\n    this.removeClasses([\n      Classes.HIDDEN,\n      Classes.VISIBLE,\n      Classes.SHUFFLE_ITEM,\n    ]);\n\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    'will-change': 'transform',\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible',\n    },\n    after: {},\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0,\n    },\n    after: {\n      visibility: 'hidden',\n    },\n  },\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001,\n};\n\nexport default ShuffleItem;\n","let element = document.body || document.documentElement;\nlet e = document.createElement('div');\ne.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\nelement.appendChild(e);\n\nlet width = window.getComputedStyle(e, null).width;\nlet ret = width === '10px';\n\nelement.removeChild(e);\n\nexport default ret;\n"],"names":["match","el","selector","vendor","call","nodes","parentNode","querySelectorAll","i","length","extend","target","arguments","source","key","hasOwnProperty","throttle","func","wait","timeoutID","last","Date","rtn","apply","ctx","args","this","delta","setTimeout","noop","getNumber","value","parseFloat","getNumberStyle","element","style","styles","window","getComputedStyle","COMPUTED_SIZE_INCLUDES_PADDING","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","randomize","array","tmp","current","top","Math","floor","random","sorter","arr","options","opts","xtend","defaults","original","slice","revert","by","sort","a","b","valA","valB","undefined","reverse","uniqueId","eventName","count","onTransitionEnd","callback","id","listener","evt","currentTarget","addEventListener","cancelTransitionEnd","transitions","removeEventListener","arrayMax","max","arrayMin","min","getItemPosition","itemSize","positions","gridSize","total","threshold","buffer","span","getColumnSpan","width","setY","getAvailablePositions","shortColumnIndex","getShortColumn","point","Point","round","setHeight","height","itemWidth","columnWidth","columns","columnSpan","abs","ceil","available","push","minPosition","len","toArray","arrayLike","Array","prototype","arrayIncludes","obj","indexOf","ce","CustomEvent","preventDefault","defaultPrevented","Error","e","event","params","origPrevent","bubbles","cancelable","detail","document","createEvent","initCustomEvent","Object","defineProperty","get","Event","proto","Element","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","uniqNoSet","ret","uniqSet","seen","Set","filter","has","add","uniqSetWithForEach","forEach","global","module","fns","context","maybeDone","err","result","finished","results","pending","fn","x","y","equals","ShuffleItem","isVisible","classList","remove","Classes","HIDDEN","VISIBLE","addClasses","SHUFFLE_ITEM","applyCss","Css","INITIAL","scale","Scale","classes","className","removeClasses","removeAttribute","body","documentElement","createElement","cssText","appendChild","removeChild","Shuffle","useSizer","lastSort","group","lastFilter","ALL_ITEMS","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","_getElementOption","TypeError","_init","items","_getItems","sizer","BASE","_initItems","_onResize","_getResizeFunction","containerCss","containerWidth","getSize","_validateStyles","_setColumns","initialSort","offsetWidth","_setTransitions","transition","speed","easing","resizeFunction","_handleResize","bind","throttleTime","option","querySelector","nodeType","jquery","position","overflow","category","collection","set","_getFilteredSets","_toggleFilterClasses","visible","hidden","item","_this","_doesPassFilter","attr","getAttribute","FILTER_ATTRIBUTE_KEY","keys","delimeter","split","JSON","parse","isArray","some","show","hide","init","dispose","visibleItems","_getFilteredItems","str","useTransforms","children","_this2","itemSelector","map","gutterSize","size","gutterWidth","gutter","_getGutterSize","_getColumnSize","calculatedColumns","columnThreshold","cols","colWidth","_getContainerSize","index","staggerAmount","staggerAmountMax","name","details","shuffle","dispatchEvent","transitionDelay","after","currPos","currScale","pos","_this3","_getItemPosition","before","_getStaggerAmount","_getConcealedItems","_this4","update","transform","left","itemCallback","done","_this5","_getStylesForTransition","_whenTransitionDone","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","_dispatchLayout","callbacks","_this6","_getTransitionFunction","_movementFinished","objects","elements","_skipTransitions","_this7","_dispatch","EventType","LAYOUT","sortObj","_filter","_shrink","_updateItemCount","_resetCols","_layout","_processQueue","_setContainerSize","isOnlyLayout","newItems","arrayUnique","concat","_updateItemsOrder","isUpdateLayout","oldItems","_this8","getItemByElement","handleLayout","_disposeItems","REMOVED","includeMargins","marginLeft","marginRight","marginTop","marginBottom","data","duration","transitionDuration","delay","__Point","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn"],"mappings":"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"}